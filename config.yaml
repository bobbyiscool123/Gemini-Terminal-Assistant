ai_temperature: 0.7
auto_save: true
auto_save_interval: 60
browser_headless: false
browser_type: chrome
confirm_dangerous: true
enable_autocompletion: true
enable_suggestions: true
enable_syntax_highlighting: true
history_file: command_history.json
log_level: INFO
max_history: 100
max_mini_steps: 4
max_parallel_commands: 1
max_phases: 30
max_retries: 3
max_steps: 10
min_mini_steps: 2
min_phases: 10
min_steps: 5
output_format: rich
save_history: true
screenshot_dir: screenshots
show_phase_tree: true
show_progress_bar: true
stream_output: true
theme: dark
timeout: 30
ui_refresh_rate: 0.5
use_advanced_browser: true
use_persistent_sessions: true
# New configuration options
command_verification_level: "high"
ai_response_style: "concise"
auto_update_check: true
custom_command_aliases: {}
enable_command_templates: true
auto_correct_typos: true
show_command_suggestions: true
enable_command_history_search: true
enable_command_analytics: false
default_text_editor: "auto"
enable_file_preview: true
max_file_preview_size_kb: 1024
enable_network_monitoring: false
show_system_stats: false
enable_notification_sounds: true
enable_context_aware_help: true
enable_smart_clipboard: false
enable_command_chaining: true
backup_history_files: true
max_history_backups: 5
enable_chat_mode: true
enable_tutorial_mode: false
# Input visibility settings
echo_input: true
use_standard_input: true  # Set to true to use standard Python input instead of prompt_toolkit

# FFmpeg related configuration
ffmpeg_path: null  # Will be auto-detected in terminal_ai_assistant.py
enable_video_preview: true
enable_video_thumbnails: true
video_thumbnail_timestamp: "00:00:05"
video_convert_presets:
  mp4_h264: 
    video_codec: "libx264"
    audio_codec: "aac"
    additional_args: ["-preset", "medium", "-crf", "23"]
  webm:
    video_codec: "libvpx-vp9"
    audio_codec: "libopus"
    additional_args: ["-b:v", "0", "-crf", "30", "-cpu-used", "2"]
  mp3:
    audio_codec: "libmp3lame"
    additional_args: ["-q:a", "2"]

# General Settings
max_tokens: 8000

# Agent Behavior
auto_run: true  # Execute commands automatically without confirmation
question_probability: 0.1  # Probability (0.0-1.0) of asking clarifying questions
display_thinking: false  # Display agent thinking process

# Execution Settings
stream_output: true  # Show command output in real-time
confirm_dangerous: true  # Confirm before executing potentially dangerous commands
timeout: 30  # Command execution timeout in seconds

# UI Settings
use_rich_formatting: true  # Use rich text formatting if available
show_subtask_details: true  # Show detailed information about subtasks
progress_bar: true  # Show progress bar for long-running tasks

# Prompt templates for Gemini 2.5 Pro
prompt_templates:
  command_generation: |
    Generate a command to: {task}
    Requirements:
    - Must be safe and appropriate for the system
    - Should handle errors gracefully
    - Should provide clear output
    - Should be compatible with the current shell
  
  task_planning: |
    Create a plan for: {task}
    Steps:
    1. Analyze the task requirements
    2. Identify required commands
    3. Consider error cases
    4. Plan output handling
  
  error_analysis: |
    Analyze the error: {error}
    Provide:
    1. Error description
    2. Possible causes
    3. Suggested solutions
  
  file_analysis: |
    Analyze the file: {file_path}
    Provide:
    1. File type and purpose
    2. Key components
    3. Dependencies
    4. Potential issues

# System prompts for different contexts
system_prompts:
  command_generation: |
    You are a command generation expert.
    Focus on:
    - System compatibility
    - Security best practices
    - Error handling
    - Clear output formatting
  
  task_planning: |
    You are a task planning expert.
    Focus on:
    - Breaking down complex tasks
    - Identifying dependencies
    - Error prevention
    - Resource optimization
  
  error_analysis: |
    You are an error analysis expert.
    Focus on:
    - Root cause identification
    - Solution verification
    - Prevention strategies
    - System-specific considerations
  
  file_analysis: |
    You are a file analysis expert.
    Focus on:
    - Code structure
    - Dependencies
    - Security considerations
    - Performance implications

# Logging Configuration
logging:
  level: "INFO"
  file: "terminal_assistant.log"
  max_size: 10485760  # 10MB
  backup_count: 5

# System Command Templates
system_commands:
  get_system_info: |
    Generate a command to get system information including:
    - Operating system details
    - System architecture
    - Memory usage
    - Disk space
    - CPU information
    Use appropriate system commands based on the operating system.

  check_package: |
    Generate a command to check if a package is installed.
    Consider different package managers (apt, pip, npm, etc.).
    Return appropriate command based on the package name and system.

  execute_command: |
    Generate a command to execute the user's request.
    Ensure the command is safe and appropriate for the system.
    Include proper error handling and output redirection.
